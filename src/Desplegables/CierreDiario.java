/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Desplegables;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author admin
 */
public class CierreDiario extends javax.swing.JFrame {

    /**
     * Creates new form CierreDiario
     */
    public CierreDiario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guardarbt = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        salirbt = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        dateIn = new com.toedter.calendar.JDateChooser();
        dateFn = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        guardarbt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/icons8-actualizar-32.png"))); // NOI18N
        guardarbt.setText("Procesar");
        guardarbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarbtActionPerformed(evt);
            }
        });

        jLabel16.setText("Fecha Inicial");

        salirbt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/icons8-salida-32.png"))); // NOI18N
        salirbt.setText("Salir");
        salirbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirbtActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(37, 109, 123));

        jLabel1.setFont(new java.awt.Font("PMingLiU-ExtB", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/icons8-diario-32.png"))); // NOI18N
        jLabel1.setText("Proceso Cierre Mensual");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(116, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jLabel18.setText("Fecha Final");

        dateIn.setDateFormatString("dd/MM/yyyy");
        dateIn.setNextFocusableComponent(dateFn);

        dateFn.setDateFormatString("dd/MM/yyyy");
        dateFn.setNextFocusableComponent(guardarbt);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateIn, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateFn, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(124, Short.MAX_VALUE)
                .addComponent(guardarbt)
                .addGap(27, 27, 27)
                .addComponent(salirbt)
                .addGap(140, 140, 140))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {guardarbt, salirbt});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel16)
                            .addComponent(dateIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(dateFn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salirbt)
                    .addComponent(guardarbt))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(177, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void guardarbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarbtActionPerformed
        if ( dateIn.getDate() == null ||  dateFn.getDate() == null ) 
        throw new IllegalArgumentException("Las fechas no deben estar vacías.");

        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechaInicio = formato.format(dateIn.getDate());
        String fechaFinal = formato.format(dateFn.getDate());
        
        
        
        realizarCierreDiario(fechaInicio, fechaFinal);
    }//GEN-LAST:event_guardarbtActionPerformed

    private void salirbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirbtActionPerformed
        this.dispose();
    }//GEN-LAST:event_salirbtActionPerformed

    public void realizarCierreDiario(String fechaInicio, String fechaFin) {
        try {
            
            
            List<String[]> transaccionesDetalle = leerTransaccionesDetalle(fechaInicio, fechaFin);

            // 3. Actualizar balances de cuentas en Catalogo_Cuentas.txt
            actualizarBalancesYPadres(transaccionesDetalle, fechaInicio, fechaFin);

            // 4. Actualizar la fecha de última actualización en Cabecera_Transaccion_Contable.txt
            actualizarFechaUltimaActualizacion();

            // 5. Marcar estado de actualización en Cabecera_Transaccion_Contable.txt
            marcarEstadoActualizacion();

            JOptionPane.showMessageDialog(null, "Cierre diario realizado exitosamente.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error durante el proceso de cierre: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    

    // Leer las transacciones del archivo Transaccion_Contable.txt dentro del rango de fechas
        private List<String[]> leerTransaccionesDetalle(String fechaInicio, String fechaFin) throws IOException {
          // Leer cabeceras que coincidan con el rango de fechas
          BufferedReader cabeceraReader = new BufferedReader(new FileReader("C:\\Users\\admin\\Desktop\\Cabecera_Transaccion_Contable.txt"));
          String cabeceraLine;
          List<String> documentosEnRango = new ArrayList<>();

           while ((cabeceraLine = cabeceraReader.readLine()) != null) {
            String[] camposCabecera = cabeceraLine.split(";");
            String fechaTransaccion = camposCabecera[1]; // La fecha de la transacción está en el índice 1
            String estado = camposCabecera[6]; // El estado de la transacción está en el índice 6

            // Evaluar sólo si el estado no es "2"
            if (!estado.equals("2") && esFechaValida(fechaTransaccion, fechaInicio, fechaFin)) {
                documentosEnRango.add(camposCabecera[0]); // Guardar el número de documento (índice 0)
            }
        }
        cabeceraReader.close();

          // Leer transacciones asociadas a los documentos encontrados
          BufferedReader detalleReader = new BufferedReader(new FileReader("C:\\Users\\admin\\Desktop\\Transaccion_Contable.txt"));
          String detalleLine;
          List<String[]> transacciones = new ArrayList<>();

          while ((detalleLine = detalleReader.readLine()) != null) {
              String[] camposDetalle = detalleLine.split(";");
              String numDocumento = camposDetalle[0]; // Número de documento en el índice 0

              // Verificar si el documento pertenece a los documentos en rango
              if (documentosEnRango.contains(numDocumento)) {
                  transacciones.add(camposDetalle);
              }
          }
          detalleReader.close();

          return transacciones;
      }

        // Verificar si la fecha de la cuenta está dentro del rango
        private boolean esFechaValida(String fechaCuenta, String fechaInicio, String fechaFin) {
            return fechaCuenta.compareTo(fechaInicio) >= 0 && fechaCuenta.compareTo(fechaFin) <= 0;
        }


        // Actualizar balances de cuentas y cuentas padres
        private void actualizarBalancesYPadres(List<String[]> transaccionesDetalle, String fechaInicio, String fechaFin) throws IOException {
        // Cargamos todas las cuentas del catálogo
        Map<String, String[]> cuentasMap = new HashMap<>();
        BufferedReader reader = new BufferedReader(new FileReader("C:\\Users\\admin\\Desktop\\Catalogo_Cuentas.txt"));
        String line;

        // Leemos el archivo de catálogo de cuentas
        while ((line = reader.readLine()) != null) {
            String[] campos = line.split(";");
            cuentasMap.put(campos[0], campos);  // Guardamos cada cuenta por su número de cuenta
        }
        reader.close();

        // Creamos un conjunto para rastrear cuentas afectadas
        Set<String> cuentasAfectadas = new HashSet<>();

        // Procesamos las transacciones
        for (String[] transaccion : transaccionesDetalle) {
            String cuentaContable = transaccion[1];  
            double debitoValue = Double.parseDouble(transaccion[4]);  
            double creditoValue = Double.parseDouble(transaccion[5]); 

            // Verificamos si la cuenta contable existe en el catálogo
            if (cuentasMap.containsKey(cuentaContable)) {
                // Actualizamos la cuenta y sus padres, registrando las cuentas afectadas
                actualizarCuentasPadres(cuentaContable, cuentasMap, debitoValue, creditoValue, cuentasAfectadas);
            }
        }

        // Escribimos solo las cuentas afectadas de nuevo en el archivo
        BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Users\\admin\\Desktop\\Catalogo_Cuentas.txt"));
        for (String cuentaId : cuentasMap.keySet()) {
            String[] cuenta = cuentasMap.get(cuentaId);
            if (cuentasAfectadas.contains(cuentaId)) {
                writer.write(String.join(";", cuenta)); // Escribir las cuentas afectadas con los cambios
            } else {
                writer.write(String.join(";", cuenta)); // Escribir las cuentas no modificadas tal cual
            }
            writer.newLine();
        }
        writer.close();
    }

    private void actualizarCuentasPadres(String cuentaContable, Map<String, String[]> cuentasMap, double debitoValue, double creditoValue, Set<String> cuentasAfectadas) {
        // Obtenemos la cuenta actual del mapa
        String[] cuenta = cuentasMap.get(cuentaContable);
        String cuentaPadre = cuenta[4];  // La cuenta padre está en la posición 4

        cuenta[9] = String.valueOf(Double.parseDouble(cuenta[9]) + debitoValue - creditoValue);  // Balance actual
        cuenta[10] = String.valueOf(Double.parseDouble(cuenta[10]) + debitoValue);              // Débitos
        cuenta[11] = String.valueOf(Double.parseDouble(cuenta[11]) + creditoValue);             // Créditos

        cuentasAfectadas.add(cuentaContable);

        if (!cuentaPadre.equals("0") && cuentasMap.containsKey(cuentaPadre)) {
            // Propagamos los valores acumulativos al padre
            actualizarCuentasPadres(cuentaPadre, cuentasMap, debitoValue, creditoValue, cuentasAfectadas);
        }
    }

    // Actualizar la fecha de la última actualización en el archivo Cabecera_Transaccion_Contable.txt
    private void actualizarFechaUltimaActualizacion() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader("C:\\Users\\admin\\Desktop\\Cabecera_Transaccion_Contable.txt"));
        String line;
        List<String> updatedLines = new ArrayList<>();

        while ((line = reader.readLine()) != null) {
            String[] campos = line.split(";");
            campos[7] = obtenerFechaActual();  // Actualizar la fecha de última actualización
            updatedLines.add(String.join(";", campos));
        }
        reader.close();

        // Escribir de nuevo el archivo actualizado
        BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Users\\admin\\Desktop\\Cabecera_Transaccion_Contable.txt"));
        for (String updatedLine : updatedLines) {
            writer.write(updatedLine);
            writer.newLine();
        }
        writer.close();
    }

    // Obtener la fecha actual en formato YYYY-MM-DD
    private String obtenerFechaActual() {
        return java.time.LocalDate.now().toString();
    }

    // Marcar el estado de actualización como True en Cabecera_Transaccion_Contable.txt
    private void marcarEstadoActualizacion() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader("C:\\Users\\admin\\Desktop\\Cabecera_Transaccion_Contable.txt"));
        String line;
        List<String> updatedLines = new ArrayList<>();

        while ((line = reader.readLine()) != null) {
            String[] campos = line.split(";");
            campos[6] = "2";  // Establecer el estado como "True"
            updatedLines.add(String.join(";", campos));
        }
        reader.close();

        // Escribir de nuevo el archivo actualizado
        BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Users\\admin\\Desktop\\Cabecera_Transaccion_Contable.txt"));
        for (String updatedLine : updatedLines) {
            writer.write(updatedLine);
            writer.newLine();
        }
        writer.close();
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CierreDiario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CierreDiario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CierreDiario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CierreDiario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CierreDiario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser dateFn;
    private com.toedter.calendar.JDateChooser dateIn;
    private javax.swing.JButton guardarbt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton salirbt;
    // End of variables declaration//GEN-END:variables
}
